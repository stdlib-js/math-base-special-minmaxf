{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum of two single-precision floating-point numbers and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( +0.0, -0.0, out, 1, 0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxf( x, y, out, stride, offset ) {\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isNegativeZerof( x ) ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = y;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = y;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( x < y ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = y;\n\t\treturn out;\n\t}\n\tout[ offset ] = y;\n\tout[ offset + stride ] = x;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minmaxf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum of two single-precision floating-point numbers.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {Array<number>} minimum and maximum values\n*\n* @example\n* var v = minmaxf( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxf( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxf( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxf( x, y ) {\n\treturn assign( x, y, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = minmaxf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum of two single-precision floating-point numbers.\n*\n* @module @stdlib/math-base-special-minmaxf\n*\n* @example\n* var minmaxf = require( '@stdlib/math-base-special-minmaxf' );\n*\n* var v = minmaxf( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxf( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxf( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar assign = require( './assign.js' );\nvar minmaxf = require( './main.js' );\n\n\n// MAIN //\n\nsetReadOnly( minmaxf, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = minmaxf;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,4CAA6C,EACxEC,EAAS,QAAS,kCAAmC,EAkCzD,SAASC,EAASC,EAAGC,EAAGC,EAAKC,EAAQC,EAAS,CAC7C,OAAKN,EAAQE,CAAE,GAAKF,EAAQG,CAAE,GAC7BC,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAASD,CAAO,EAAI,IAClBD,GAEHF,IAAMC,GAAKD,IAAM,EAChBH,EAAiBG,CAAE,GACvBE,EAAKE,CAAO,EAAIJ,EAChBE,EAAKE,EAASD,CAAO,EAAIF,EAClBC,IAERA,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIH,EAClBE,GAEHF,EAAIC,GACRC,EAAKE,CAAO,EAAIJ,EAChBE,EAAKE,EAASD,CAAO,EAAIF,EAClBC,IAERA,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIH,EAClBE,EACR,CAKAN,EAAO,QAAUG,ICtFjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,IAwBb,SAASC,EAASC,EAAGC,EAAI,CACxB,OAAOH,EAAQE,EAAGC,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACzC,CAKAJ,EAAO,QAAUE,ICZjB,IAAIG,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaE,EAAS,SAAUD,CAAO,EAKvC,OAAO,QAAUC",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isNegativeZerof", "isnanf", "minmaxf", "x", "y", "out", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "assign", "minmaxf", "x", "y", "setReadOnly", "assign", "minmaxf"]
}
