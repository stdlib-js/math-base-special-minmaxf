{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum of two single-precision floating-point numbers and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - first number\n* @param {number} y - second number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} minimum and maximum values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( 3.14, 4.2, out, 1, 0 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( 3.14, NaN, out, 1, 0 );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxf( +0.0, -0.0, out, 1, 0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxf( x, y, out, stride, offset ) {\n\tif ( isnanf( x ) || isnanf( y ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === y && x === 0.0 ) {\n\t\tif ( isNegativeZerof( x ) ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = y;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = y;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( x < y ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = y;\n\t\treturn out;\n\t}\n\tout[ offset ] = y;\n\tout[ offset + stride ] = x;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum of two single-precision floating-point numbers.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {Array<number>} minimum and maximum values\n*\n* @example\n* var v = minmaxf( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var v = minmaxf( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxf( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*/\nfunction minmaxf( x, y ) {\n\treturn assign( x, y, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default minmaxf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the minimum and maximum of two single-precision floating-point numbers.\n*\n* @module @stdlib/math-base-special-minmaxf\n*\n* @example\n* import minmaxf from '@stdlib/math-base-special-minmaxf';\n*\n* var v = minmaxf( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* v = minmaxf( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* v = minmaxf( +0.0, -0.0 );\n* // returns [ -0.0, 0.0 ]\n*\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport minmaxf from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( minmaxf, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default minmaxf;\n"],"names":["minmaxf","x","y","out","stride","offset","isnanf","NaN","isNegativeZerof","assign","setReadOnly"],"mappings":";;wUAyDA,SAASA,EAASC,EAAGC,EAAGC,EAAKC,EAAQC,GACpC,OAAKC,EAAQL,IAAOK,EAAQJ,IAC3BC,EAAKE,GAAWE,IAChBJ,EAAKE,EAASD,GAAWG,IAClBJ,GAEHF,IAAMC,GAAW,IAAND,EACVO,EAAiBP,IACrBE,EAAKE,GAAWJ,EAChBE,EAAKE,EAASD,GAAWF,EAClBC,IAERA,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWH,EAClBE,GAEHF,EAAIC,GACRC,EAAKE,GAAWJ,EAChBE,EAAKE,EAASD,GAAWF,EAClBC,IAERA,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWH,EAClBE,EACR,CCnCA,SAASH,EAASC,EAAGC,GACpB,OAAOO,EAAQR,EAAGC,EAAG,CAAE,EAAK,GAAO,EAAG,EACvC,CCAAQ,EAAAV,EAAA,SAAAS"}